# Converter created by Rseed

class <%= @converter_name.camelize %>Converter < Rseed::Converter
<% @columns.each_pair do |attribute, meta| -%>
    attribute :<%= attribute %>, type: :<%= meta.type %>
<% end -%>

    def <%= @model_name %>_attributes values
        attributes = {}

        [<%= [].tap { |list| @columns.each_pair{|attribute, meta| list << ":#{attribute}"}}.join(", ") %>].each do |attribute|
            attributes[attribute] = values[attribute]
        end

        return attributes
    end

    def before_deserialize
    end

    def after_deserialize
    end

    def deserialize values
        # Prevents nil values coming from the import overwriting the model attributes
        remove_nil_from values
        # Prevents blank values coming from the import overwriting the model attributes
        # remove_blank_from values

        # For create only
        <%= @model_name %> = <%= @class_name %>.new
        # For create or update, use the following instead and change the match attribute name as required
        # match_attribute = :id
        # <%= @model_name %> = <%= @class_name %>.where(match_attribute => values[match_attribute]).first_or_initialize

        # This will return false if the record fails to update, signalling a failed import
        <%= @model_name %>.update_attributes <%= @model_name %>_attributes(values)
    end
end
